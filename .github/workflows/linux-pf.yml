name: build-linux-pf
on:
  workflow_dispatch:
#    inputs:
#      pf_branch:
#        type: string
#        required: true
#        description: "pf kernel branch"
        
jobs:
  build:
    runs-on: ubuntu-latest
#    container: alpine:3.19
    steps:
      - name: Cleanup
#        if: ${{ 'true' == 'false' }}
        run: |
          docker images
          sudo rm -rf "/opt/*" || true
          sudo rm -rf "/usr/share/dotnet" || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          sudo rm -rf "/usr/local/lib/android" || true
          sudo rm -rf "/usr/local/share/boost" || true
          sudo rm -rf "/usr/lib/jvm" || true
          sudo rm -rf "/usr/share/swift" || true
          sudo rm -rf "/usr/local/julia*" || true
          sudo rm -rf "/usr/share/kotlinc" || true
          sudo rm -rf "/usr/local/share/edge_driver" || true
          sudo rm -rf "/usr/local/share/chromedriver-linux64" || true
          sudo rm -rf "/usr/local/share/gecko_driver" || true
          sudo rm -rf "/usr/share/miniconda" || true
          sudo rm -rf "/usr/local/share/phantomjs*" || true
          sudo rm -rf "/usr/share/sbt" || true
          sudo rm -rf "/usr/local/sqlpackage" || true
          docker rmi $(docker image ls -q --filter "reference=node*")
          docker rmi $(docker image ls -q --filter "reference=debian*")
          docker rmi $(docker image ls -q --filter "reference=alpine*")
          docker rmi $(docker image ls -q --filter "reference=ubuntu:20.04")
          sudo npm uninstall bazel
          rustup self uninstall -y
          sudo apt purge \
            ansible \
            apache2 \
            aria2 \
            azure-cli \
            cabal* \
            clang* \
            dotnet-sdk* \
            firefox \
            ghc* \
            google-chrome-stable \
            google-cloud-sdk \
            kubectl \
            libpq-dev \
            microsoft-edge-stable \
            moby-buildx \
            moby-cli \
            moby-compose \
            moby-engine \
            mongodb* \
            mono-complete \
            mysql* \
            nginx \
            node* \
            npm* \
            nuget \
            php* \
            postgresql* \
            powershell \
            r-base \
            rpm \
            ruby* \
            sphinxsearch \
            subversion \
            yarn \
            -yq >/dev/null 2>&1 || true
          sudo apt-get autoremove -y >/dev/null 2>&1 || true
          sudo apt-get autoclean -y >/dev/null 2>&1 || true
          df -h
      - name: Checkount repo
        uses: actions/checkout@v4
      - name: Checkount aports repository
        uses: actions/checkout@v4  
        with:
          repository: alpinelinux/aports
          ref: 3.19-stable
          path: aports
      - name: Prepare for abuild
        run: |
           cp -a aports/community/linux-edge .
           cd linux-edge
           mv config-edge.x86_64 config-pf.x86_64
           sed -i -e '/unset LDFLAGS/i \ \tscripts/config -e CONFIG_MOUSE_PS2_SENTELIC' APKBUILD
           sed -i -e '/unset LDFLAGS/i \ \tscripts/config -e CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL' APKBUILD
           sed -i -e '/unset LDFLAGS/i \ \tscripts/config -d CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE' APKBUILD
           sed -i -e '/unset LDFLAGS/i \ \tscripts/config -e CONFIG_CPU_FREQ_GOV_CONSERVATIVE' APKBUILD
           sed -i -e '/unset LDFLAGS/i \ \tscripts/config -e CONFIG_CPU_FREQ_GOV_SCHEDUTIL' APKBUILD
           sed -i -e 's/_flavor=edge/_flavor=pf/g' APKBUILD
           sed -i -e 's/-config-edge/-config-pf/g' APKBUILD
           sed -i -e 's/config-edge.x86_64/config-pf.x86_64/g' APKBUILD
           sed -i -e 's/_package edge/_package pf/g' APKBUILD
           sed -i -e 's/linux-edge/linux-pf/g' APKBUILD
           sed -i -e 's|https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/linux-$_kernver.tar.xz|https://codeberg.org/pf-kernel/linux/archive/v6.8-pf1.tar.gz|g' APKBUILD
           sed -i -e '/*.*.*)\tsource="$source/d' APKBUILD
           sed -i -e '/https:\/\/cdn.kernel.org\/pub\/linux\/kernel\/v${pkgver%%.*}.x\/patch-$pkgver.xz"/d' APKBUILD
           sed -i -e '/patch-6.8.1.xz/d' APKBUILD
           curl -LO https://codeberg.org/pf-kernel/linux/archive/v6.8-pf1.tar.gz
           export NEW=$(sha512sum v6.8-pf1.tar.gz | awk '{ print $1}')
           echo "sed -i -e 's/5c4eb4aa1d3f7d1ea01c0f7ddeadacdece6e144fd4bdfc16b2b925d3e10dc04de3a6db69320b79a96c3560052616f001d2c09e7a1bb4f7b731e2380a7ecce068  linux-6.8.tar.xz/${NEW}  v6.8-pf1.tar.gz/g' APKBUILD" | bash
           sed -i -e 's/linux-${_kernver}/linux/g' APKBUILD
           sed -i -e '/unxz/d' APKBUILD
           sed -i -e '/Applying patch/d' APKBUILD
           export OLD=$(sha512sum config-pf.x86_64 | awk '{ print $1}')
           curl -L https://aur.archlinux.org/cgit/aur.git/plain/config?h=linux-pf -o config-pf.x86_64
           export NEW=$(sha512sum config-pf.x86_64 | awk '{ print $1}')
           echo "sed -i -e 's/${OLD}/${NEW}/g' APKBUILD" | bash
      - name: Set UserID
        run: |
          echo "USERID=$(id -u $(whoami))" >> $GITHUB_ENV
        env: 
          USERID: ''          
      - name: Build
        uses: docker://alpine:3.19
        with:
          entrypoint: '/bin/sh'
          args: ./build-pf.sh ${{ env.USERID }}
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-pf
          path: ${{ github.workspace }}/*.apk
